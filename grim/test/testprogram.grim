opf 100 #(com)
    com + 1
end

opm 2 +(va1 va2)
    __plus(va1 va2)
end

opm 2 -(va1 va2)
    __minus(va1 va2)
end

opm 3 *(va1 va2)
    __mul(va1 va2)
end

opm 3 /(va1 va2)
    __div(va1 va2)
end

opm 0 =(;na va)
    __assign(na va)
end

opb 10 °(do)
    do / 5
end

fun testfun(va1)
    va1 * 2 + 5 + " : value*2 + 5"
end

print("print string test")

__assign(assign_test1 "assign test1")
print(assign_test1)

assign_test2 = "assign test2"
print(assign_test2)

print(testfun(100)) # "関数実行テスト 205 : value*2 + 5"

print(# "op1 test")

print("front " + #(1))
print("mid " + +(1 2))
print("back " + °(10)) # "2"

# "エスケープシーケンス"
print("\"")
print('\'')


# "演算子の優先度のテスト"
print(# 9) # "front 10"
print(1 + 100) # "mid 101"
print(9 °) # "back 1.8"

print(2 + 3 * 3) # "mid 11"
print(# 9 °) # "backfront 2.0"
print(# 9 ° + # 9 ° * # 99 °) # "組み合わせ 42"
print(# # # # 621 ° ° ° °) # "連続 1.0"

print((1 + 3) * (2 + 3 * 5)) # "括弧 68"
print(# (1 + 3)) # "5"
print(# (1 + 3) °) # "1.0"

print(("not" + "used" "here")) # "括弧の最後が返されるかチェック"

# "キャスト"
print(__str(1) + __str(2)) # "12"
print(__num("1.1") + __num("5.5")) # "6.6"

# "Boolean"
print(__true()) # "True"
print(__false()) # "False"
print(__equal(__true() __true())) # "True"
print(__equal("Hello" "Hello")) # "True"
print(__equal(1 1)) # "True"
print(__equal(1 2)) # "False"

print(__larger(10 1)) # "True"
print(__larger(1 1)) # "False"
print(__larger(0 1)) # "False"

opm 1 ==(va1 va2)
    __equal(va1 va2)
end

opm 1 >(va1 va2)
    __larger(va1 va2)
end

opm 1 <(va1 va2)
    va2 > va1
end

opm 0 and(va1 va2)
    va1 == va2
end

opf 0 not(_va)
    __assign(__res __true)
    if(_va == __true)
        __assign(__res __false)
    end
    return(__res)
end

opm 1 !=(_va1 _va2)
    return(not __equal(_va1 _va2))
end

opm 0 or(_va1 _va2)
    __assign(__res __false)
    if (_va1)
        __assign(__res __true)
    end
    if (_va2)
        __assign(__res __true)
    end
    return(__res)
end

print(1 == 1) # "True"
print("1" == 1) # "False"
print(3 > 1) # "True"
print(1 < 3) # "True"
print(3 > 1 and 1 < 3) # "True"
print(3 > 1 and 1 > 3) # "False"


if (3 > 1 and 2 < 3)
    print("3 is larger than 1")
end

# "型"

print(__type("none"))
print(__type(100))
print(__type("あああ"))

# "strin"

print(__strin("abcde" 0))
print(__strin("abcde" 5))
print(__strin("abcde" -5))

# "配列[実装]"
fun array_get(_ary _index _split _end)

    opm 0 =(;na va)
        __assign(na va)
    end

    fun readArray(_nowStrIndex _nowIndex)
    
        opm 0 =(;na va)
            __assign(na va)
        end

        __s = __strin(_ary _nowStrIndex)
        suc1 = __false

        if (__s == _split)
            suc1 = __true

            if(_nowIndex != 0)
                _ary_strs = ""
                _ary_strs = readArray(_nowStrIndex + 1 _nowIndex - 1)
            end
        end

        if(not suc1)
            if (__s == _end)
                suc1 = __true

                if(_nowIndex != 0)
                    _ary_strs = __false
                end
            end
            
            if(not suc1)
                _ary_strs = _ary_strs + __s
                _ary_strs = readArray(_nowStrIndex + 1 _nowIndex)
            end
        end
        
        return(_ary_strs)
    end

    _ary_strs = ""
    type_check = __true
    if (__type(_ary) != "String" or __type(_index) != "Numeric")
        type_check = __false
        _ary_strs = __false
    end

    if(type_check)
        _ary_strs = readArray(0 _index)
    end

    return(_ary_strs)
end

# "arrayのテスト (再帰の実装も兼ねてる)" 
fun array_test(_array_text _now _last)
    if(_last != _now)
        print(array_get(_array_text _now " " "!"))
        array_test(_array_text _now + 1 _last)
    end
end

array_test("1 2 3 4 5 6!" 0 6)